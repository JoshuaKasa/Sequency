* ChaCha20 is a stream cipher algorithm that operates on 32-bit words, designed by Daniel J. Bernstein. It is can also be used as a PRNG. Here is a brief description of the ChaCha20 PRNG algorithm, its use cases, pros, and cons:

- Description:
ChaCha20 is based on the concept of a 4x4 matrix of 32-bit words, which undergoes multiple rounds of mixing operations to generate a pseudorandom stream of bits. It uses a secret key and a nonce to produce the output. The algorithm employs simple arithmetic operations like addition, rotation, and XOR to ensure fast and secure generation of random-like sequences.

- Use Cases:
ChaCha20 is commonly used in encryption protocols, including Transport Layer Security (TLS), Internet Key Exchange (IKE), and secure messaging applications like Signal. It can also be utilized for generating random numbers in general-purpose programming.

- Pros:
Security: ChaCha20 is considered highly secure and resistant to cryptanalysis. It has undergone extensive scrutiny and analysis by the cryptographic community.
Speed: The algorithm is designed to be highly efficient, offering excellent performance on modern computer architectures, especially when implemented in hardware or optimized software.
Simplicity: ChaCha20 has a relatively simple design, making it easier to implement correctly and audit for potential vulnerabilities.
Resistance to side-channel attacks: ChaCha20 is less susceptible to side-channel attacks compared to other algorithms like AES, making it a suitable choice for environments where such attacks are a concern.

- Cons:
Lack of widespread adoption: Although ChaCha20 is gaining popularity, it is not as widely supported as the Advanced Encryption Standard (AES) in some cryptographic libraries or applications.
Key management: ChaCha20 does not provide built-in key management or authentication mechanisms. These aspects need to be addressed separately when using the algorithm for secure communications.
Limited block size: ChaCha20 generates a stream of bits rather than encrypting fixed-size blocks, which may limit its applicability in certain scenarios that require specific block sizes.

- Use:

int8 key[32] = { 32 random bytes }; <-- Here you'll need to insert 32 random bytes (8 bits numbers) that ChaCha20 will use as a key. You can generate them using any random number generator.
int8 nonce[12] = { 12 random bytes }; <-- Same thing as the key, but here you'll need to insert 12 random bytes.

ChaCha20 chacha20(key, nonce); <-- We now create a ChaCha20 object with the key and nonce we generated; which we'll use to generate the random numbers.

int8 random_number = chacha20.generate(0, 0xff); <-- We now generate a random number using the ChaCha20 object we created.